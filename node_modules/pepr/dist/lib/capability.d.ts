import { GroupVersionKind } from "./k8s/types";
import { Binding, CapabilityCfg, GenericClass, HookPhase, WhenSelector } from "./types";
/**
 * A capability is a unit of functionality that can be registered with the Pepr runtime.
 */
export declare class Capability implements CapabilityCfg {
    private _name;
    private _description;
    private _namespaces?;
    private _mutateOrValidate;
    private _bindings;
    get bindings(): Binding[];
    get name(): string;
    get description(): string;
    get namespaces(): string[];
    get mutateOrValidate(): HookPhase;
    constructor(cfg: CapabilityCfg);
    /**
     * The When method is used to register a capability action to be executed when a Kubernetes resource is
     * processed by Pepr. The action will be executed if the resource matches the specified kind and any
     * filters that are applied.
     *
     * @param model the KubernetesObject model to match
     * @param kind if using a custom KubernetesObject not available in `a.*`, specify the GroupVersionKind
     * @returns
     */
    When: <T extends GenericClass>(model: T, kind?: GroupVersionKind) => WhenSelector<T>;
}
//# sourceMappingURL=capability.d.ts.map