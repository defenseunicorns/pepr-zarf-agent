/**
 * Enumeration representing different logging levels.
 */
export declare enum LogLevel {
    debug = 0,
    info = 1,
    warn = 2,
    error = 3
}
/**
 * Simple logger class that logs messages at different log levels.
 */
export declare class Logger {
    private _logLevel;
    /**
     * Create a new logger instance.
     * @param logLevel - The minimum log level to log messages for.
     */
    constructor(logLevel: LogLevel);
    /**
     * Change the log level of the logger.
     * @param logLevel - The log level to log the message at.
     */
    SetLogLevel(logLevel: string): void;
    /**
     * Log a debug message.
     * @param message - The message to log.
     */
    debug<T>(message: T, prefix?: string): void;
    /**
     * Log an info message.
     * @param message - The message to log.
     */
    info<T>(message: T, prefix?: string): void;
    /**
     * Log a warning message.
     * @param message - The message to log.
     */
    warn<T>(message: T, prefix?: string): void;
    /**
     * Log an error message.
     * @param message - The message to log.
     */
    error<T>(message: T, prefix?: string): void;
    /**
     * Log a message at the specified log level.
     * @param logLevel - The log level of the message.
     * @param message - The message to log.
     */
    private log;
    private colorize;
}
/** Log is an instance of Logger used to generate log entries. */
declare const Log: Logger;
export default Log;
//# sourceMappingURL=logger.d.ts.map