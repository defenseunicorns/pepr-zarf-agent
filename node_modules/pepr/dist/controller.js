#!/usr/bin/env node
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// src/runtime/controller.ts
var import_child_process = require("child_process");
var import_crypto = __toESM(require("crypto"));
var import_fs = __toESM(require("fs"));
var import_zlib = require("zlib");

// src/lib/logger.ts
var LogLevel = /* @__PURE__ */ ((LogLevel2) => {
  LogLevel2[LogLevel2["debug"] = 0] = "debug";
  LogLevel2[LogLevel2["info"] = 1] = "info";
  LogLevel2[LogLevel2["warn"] = 2] = "warn";
  LogLevel2[LogLevel2["error"] = 3] = "error";
  return LogLevel2;
})(LogLevel || {});
var Logger = class {
  _logLevel;
  /**
   * Create a new logger instance.
   * @param logLevel - The minimum log level to log messages for.
   */
  constructor(logLevel) {
    this._logLevel = logLevel;
  }
  /**
   * Change the log level of the logger.
   * @param logLevel - The log level to log the message at.
   */
  SetLogLevel(logLevel) {
    this._logLevel = LogLevel[logLevel];
    this.debug(`Log level set to ${logLevel}`);
  }
  /**
   * Log a debug message.
   * @param message - The message to log.
   */
  debug(message, prefix) {
    this.log(0 /* debug */, message, prefix);
  }
  /**
   * Log an info message.
   * @param message - The message to log.
   */
  info(message, prefix) {
    this.log(1 /* info */, message, prefix);
  }
  /**
   * Log a warning message.
   * @param message - The message to log.
   */
  warn(message, prefix) {
    this.log(2 /* warn */, message, prefix);
  }
  /**
   * Log an error message.
   * @param message - The message to log.
   */
  error(message, prefix) {
    this.log(3 /* error */, message, prefix);
  }
  /**
   * Log a message at the specified log level.
   * @param logLevel - The log level of the message.
   * @param message - The message to log.
   */
  log(logLevel, message, callerPrefix = "") {
    const color = {
      [0 /* debug */]: "\x1B[30m" /* FgBlack */,
      [1 /* info */]: "\x1B[36m" /* FgCyan */,
      [2 /* warn */]: "\x1B[33m" /* FgYellow */,
      [3 /* error */]: "\x1B[31m" /* FgRed */
    };
    if (logLevel >= this._logLevel) {
      let prefix = "[" + LogLevel[logLevel] + "]	" + callerPrefix;
      prefix = this.colorize(prefix, color[logLevel]);
      if (typeof message !== "string") {
        console.log(prefix);
        console.debug("%o", message);
      } else {
        console.log(prefix + "	" + message);
      }
    }
  }
  colorize(text, color) {
    return color + text + "\x1B[0m" /* Reset */;
  }
};
var Log = new Logger(1 /* info */);
if (process.env.LOG_LEVEL) {
  Log.SetLogLevel(process.env.LOG_LEVEL);
}
var logger_default = Log;

// src/cli/init/templates/data.json
var packageJSON = { name: "pepr", description: "Kubernetes application engine", author: "Defense Unicorns", homepage: "https://github.com/defenseunicorns/pepr", license: "Apache-2.0", bin: "dist/cli.js", repository: "defenseunicorns/pepr", engines: { node: ">=18.0.0" }, version: "0.7.0", main: "dist/lib.js", types: "dist/lib.d.ts", scripts: { prebuild: "rm -fr dist/* && node hack/build-template-data.js", build: "tsc && node build.mjs", test: "npm run test:unit && npm run test:e2e", "test:unit": "npm run build && tsc -p tsconfig.tests.json && ava dist/**/*.test.js", "test:e2e": "npm run test:e2e:k3d && npm run test:e2e:build && npm run test:e2e:image && npm run test:e2e:run", "test:e2e:k3d": "k3d cluster delete pepr-dev && k3d cluster create pepr-dev --k3s-arg '--debug@server:0'", "test:e2e:build": "npm run build && npm pack && npm uninstall pepr -g && npm install -g pepr-0.0.0-development.tgz && pepr", "test:e2e:image": "docker buildx build --tag pepr:dev . && k3d image import pepr:dev -c pepr-dev", "test:e2e:run": "ava hack/e2e.test.mjs --sequential --timeout=2m", "format:check": "eslint src && prettier src --check", "format:fix": "eslint src --fix && prettier src --write" }, dependencies: { "@kubernetes/client-node": "0.18.1", express: "4.18.2", "fast-json-patch": "3.1.1", "http-status-codes": "2.2.0", "node-fetch": "2.6.11", ramda: "0.29.0" }, devDependencies: { "@types/eslint": "8.40.0", "@types/express": "4.17.17", "@types/node-fetch": "2.6.4", "@types/node-forge": "1.3.2", "@types/prettier": "2.7.3", "@types/prompts": "2.4.4", "@types/ramda": "0.29.2", "@types/uuid": "9.0.1", ava: "5.3.0", nock: "13.3.1" }, peerDependencies: { "@typescript-eslint/eslint-plugin": "5.59.7", "@typescript-eslint/parser": "5.59.7", commander: "10.0.1", esbuild: "0.17.19", eslint: "8.41.0", "node-forge": "1.3.1", prettier: "2.8.8", prompts: "2.4.2", typescript: "5.0.4", uuid: "9.0.0" }, ava: { failFast: true, verbose: true } };

// src/runtime/controller.ts
var { version } = packageJSON;
function validateHash(expectedHash) {
  if (!expectedHash || expectedHash.length !== 64) {
    logger_default.error("Invalid hash");
    process.exit(1);
  }
}
function runModule(expectedHash) {
  const gzPath = `/app/load/module-${expectedHash}.js.gz`;
  const jsPath = `/app/module-${expectedHash}.js`;
  logger_default.SetLogLevel("debug");
  if (!import_fs.default.existsSync(gzPath)) {
    logger_default.error(`File not found: ${gzPath}`);
    process.exit(1);
  }
  try {
    logger_default.info(`Loading module ${gzPath}`);
    const codeGZ = import_fs.default.readFileSync(gzPath);
    const code = (0, import_zlib.gunzipSync)(codeGZ);
    const actualHash = import_crypto.default.createHash("sha256").update(code).digest("hex");
    if (expectedHash !== actualHash) {
      logger_default.error(`File hash does not match, expected ${expectedHash} but got ${actualHash}`);
      process.exit(1);
    }
    logger_default.info(`File hash matches, running module`);
    import_fs.default.writeFileSync(jsPath, code);
    (0, import_child_process.fork)(jsPath);
  } catch (e) {
    logger_default.error(`Failed to decompress module: ${e}`);
    process.exit(1);
  }
}
logger_default.info(`Pepr Controller (v${version})`);
var hash = process.argv[2];
validateHash(hash);
runModule(hash);
